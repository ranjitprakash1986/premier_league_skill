library(rstan)
library(rstantools)
library(cowplot)
library(lubridate)
library(dplyr)
rstan_options(auto_write = TRUE)  # To save some compiling
games_raw <- read_csv("../data/epl_2022_2023_matches.csv")
head(games_raw)
games <- games_raw |>
mutate(date = as.numeric(format(as.Date(games_raw$Date, format="%d-%m-%Y"), "%Y")),
away_team = as.factor(Away),
home_team = as.factor(Home),
away_xg = as.numeric(away_xG),
home_xg = as.numeric(home_xG)
) |>
select(
date, home_team, home_final_score, home_xg, away_team, away_final_score, away_xg
)
head(games)
dictionary_names <- tibble(
team = levels(games$away_team),
code = 1:20
)
# Ensuring the levels are per the alphabetical order
levels(games$away_team) <- 1:20
levels(games$home_team) <- 1:20
games <- games %>%
mutate(
winning_team = case_when(
away_final_score > home_final_score ~ away_team,
away_final_score < home_final_score ~ home_team
),
winning_score = case_when(
away_final_score > home_final_score ~ away_final_score,
away_final_score < home_final_score ~ home_final_score
),
winning_xg = case_when(
away_xg > home_xg ~ away_xg,
away_xg < home_xg ~ home_xg
),
losing_team = case_when(
away_final_score > home_final_score ~ home_team,
away_final_score < home_final_score ~ away_team
),
losing_score = case_when(
away_final_score > home_final_score ~ home_final_score,
away_final_score < home_final_score ~ away_final_score
),
losing_xg = case_when(
away_xg > home_xg ~ home_xg,
away_xg < home_xg ~ away_xg
),
score_diff = winning_score - losing_score,
xg_diff = winning_xg - losing_xg
) %>%
select(
winning_team, winning_score, winning_xg,
losing_team, losing_score, losing_xg, score_diff, xg_diff
)
# Removing the rows where there is an NA, draws will be marked with NA
games <- drop_na(games)
football_dictionary <- list(
n = nrow(games),
t = nrow(dictionary_names),
win_team = as.integer(games$winning_team),
lose_team = as.integer(games$losing_team),
score_diff = as.integer(games$score_diff)
)
posterior_football <- sampling(
object = football_stan_model, #Stan model
data = football_dictionary, # data for the model
chains = 1, # number of sampling runs
iter = 20000, # number of iterations
warmup = 2000, # burning iteration for stability
thin = 20, # number of steps to skip between each draw
seed = 553 # for reproducibility
)
posterior_football <- as.data.frame(posterior_football)
# dropping the last column
posterior_football <- posterior_football[, 1:20]
# We create a new column indicating the replicate by row (900 in total).
posterior_football$sample <- 1:nrow(posterior_football)
## Melting the data frame leaving one column for the replicate number (sample),
## another one indicating the team (as skill[1], ... skill[20]), and
## the continuous posterior skill values from our Bayesian sampling.
posterior_football <- posterior_football |>
pivot_longer(!sample, names_to = "team", values_to = "skill")
## Getting real team names stored in dictionary_names insead of the coded numbers
posterior_football$team <- as.factor(posterior_football$team)
dictionary_names <- dictionary_names %>%
mutate(code = paste("skill[", as.character(code), "]", sep = ""))
recoding <- dictionary_names$team
names(recoding) <- dictionary_names$code
levels(posterior_football$team) <- recode(
levels(posterior_football$team),
!!!recoding)
View(posterior_football)
posterior_football_CIs <- posterior_football |>
group_by(team) |> summarise(lower_bound = quantile(skill, 0.25),
median = quantile(skill, 0.5),
upper_bound = quantile(skill, 0.75))
head(posterior_football_CIs)
posterior_football_CIs <- posterior_football_CIs[order(-posterior_football_CIs$median), ]
posterior_football_CIs_plot <- posterior_football_CIs |> ggplot(aes(x = median, y = reorder(team, median), color =team)) + geom_errorbarh(aes(xmin = lower_bound, xmax = upper_bound)) + geom_point() + labs(x = "Median", y= "Team Code", title = "50% Credible Intervals of Skill by Team") + theme_classic()
posterior_football_CIs <- posterior_football_CIs[order(-posterior_football_CIs$median), ]
posterior_football_CIs_plot <- posterior_football_CIs |> ggplot(aes(x = median, y = reorder(team, median), color =team)) + geom_errorbarh(aes(xmin = lower_bound, xmax = upper_bound)) + geom_point() + labs(x = "Median", y= "Team Code", title = "50% Credible Intervals of Skill by Team") + theme_classic()
posterior_baseball_CIs_plot
posterior_football_CIs <- posterior_football_CIs[order(-posterior_football_CIs$median), ]
posterior_football_CIs_plot <- posterior_football_CIs |> ggplot(aes(x = median, y = reorder(team, median), color =team)) + geom_errorbarh(aes(xmin = lower_bound, xmax = upper_bound)) + geom_point() + labs(x = "Median", y= "Team Code", title = "50% Credible Intervals of Skill by Team") + theme_classic()
posterior_football_CIs_plot
posterior_football_CIs <- posterior_football_CIs[order(-posterior_football_CIs$median), ]
posterior_football_CIs_plot <- posterior_football_CIs |> ggplot(aes(x = median, y = reorder(team, median), color =team)) + geom_errorbarh(aes(xmin = lower_bound, xmax = upper_bound)) + geom_point() + labs(x = "Median", y= "Team Code", title = "50% Credible Intervals of Skill by Team") + theme_classic()
posterior_football_CIs_plot
ggsave("../img/50p_credible_inerval_skill.png")
posterior_football_CIs <- posterior_football_CIs[order(-posterior_football_CIs$median), ]
posterior_football_CIs_plot <- posterior_football_CIs |> ggplot(aes(x = median, y = reorder(team, median), color =team)) + geom_errorbarh(aes(xmin = lower_bound, xmax = upper_bound)) + geom_point() + labs(x = "Median", y= "Team Code", title = "50% Credible Intervals of Skill by Team") + theme_classic()
posterior_football_CIs_plot
ggsave("../img/50p_credible_interval_skill.png")
View(games)
plot(y=game$xg_diff)
plot(y=games$xg_diff)
plot(games$xg_diff)
hist(games$xg_diff)
hist(games$xg_diff, breaks = c(0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, .4, 0.45, 0.5))
hist(games$xg_diff, breaks = c(0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, .4, 0.45, 0.5, max(games$xg_diff)))
hist(games$xg_diff, breaks = seq(min(games$xg_diff), max(games$xg_diff), 0.05))
hist(games$xg_diff, breaks = seq(min(games$xg_diff), max(games$xg_diff), 0.02))
hist(games$xg_diff, breaks = seq(min(games$xg_diff), max(games$xg_diff), 0.1))
hist(games$xg_diff, breaks = seq(min(games$xg_diff), max(games$xg_diff), 0.2))
hist(games$score_diff, breaks = seq(min(games$score_diff), max(games$score_diff), 0.2))
hist(games$score_diff, breaks = seq(min(games$score_diff), max(games$score_diff), 0.5))
hist(games$score_diff, breaks = seq(min(games$score_diff), max(games$score_diff), 1))
poisson(1)
poisson(log(1))
dpois(games$score_diff, lambda = 1)
plot(dpois(games$score_diff, lambda = 1))
hist(dpois(games$score_diff, lambda = 1))
hist(games$xg_diff, breaks = seq(min(games$xg_diff), max(games$xg_diff), 0.2))
hist(games$score_diff, breaks = seq(min(games$score_diff), max(games$score_diff), 0.2))
value <- rgamma(n=1000, shape=1, rate=5)
hist(value)
hist(games$score_diff, breaks = seq(min(games$score_diff), max(games$score_diff), 0.2))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rstan)
library(rstantools)
library(cowplot)
library(lubridate)
library(dplyr)
rstan_options(auto_write = TRUE)  # To save some compiling
games_raw <- read_csv("../data/epl_2022_2023_matches.csv")
head(games_raw)
games <- games_raw |>
mutate(date = as.numeric(format(as.Date(games_raw$Date, format="%d-%m-%Y"), "%Y")),
away_team = as.factor(Away),
home_team = as.factor(Home),
away_xg = as.numeric(away_xG),
home_xg = as.numeric(home_xG)
) |>
select(
date, home_team, home_final_score, home_xg, away_team, away_final_score, away_xg
)
head(games)
dictionary_names <- tibble(
team = levels(games$away_team),
code = 1:20
)
# Ensuring the levels are per the alphabetical order
levels(games$away_team) <- 1:20
levels(games$home_team) <- 1:20
games <- games %>%
mutate(
winning_team = case_when(
away_final_score > home_final_score ~ away_team,
away_final_score < home_final_score ~ home_team
),
winning_score = case_when(
away_final_score > home_final_score ~ away_final_score,
away_final_score < home_final_score ~ home_final_score
),
winning_xg = case_when(
away_xg > home_xg ~ away_xg,
away_xg < home_xg ~ home_xg
),
losing_team = case_when(
away_final_score > home_final_score ~ home_team,
away_final_score < home_final_score ~ away_team
),
losing_score = case_when(
away_final_score > home_final_score ~ home_final_score,
away_final_score < home_final_score ~ away_final_score
),
losing_xg = case_when(
away_xg > home_xg ~ home_xg,
away_xg < home_xg ~ away_xg
),
score_diff = winning_score - losing_score,
xg_diff = winning_xg - losing_xg
) %>%
select(
winning_team, winning_score, winning_xg,
losing_team, losing_score, losing_xg, score_diff, xg_diff
)
# Removing the rows where there is an NA, draws will be marked with NA
games <- drop_na(games)
plot1 <- hist(games$score_diff, breaks = seq(min(games$score_diff), max(games$score_diff), 0.2))
plot1
ggsave("../img/score_diff_histogram")
plot1 <- hist(games$score_diff, breaks = seq(min(games$score_diff), max(games$score_diff), 0.2))
plot1
ggsave("../img/score_diff_histogram.png")
plot2 <- hist(rgamma(n=1000, shape=1, rate=5))
plot2
ggsave("../img/score_diff_gamma_distribution.png")
plot1 <- hist(games$score_diff, breaks = seq(min(games$score_diff), max(games$score_diff), 0.2))
plot1
ggsave("../img/score_diff_histogram.png")
plot2 <- hist(rgamma(n=1000, shape=1, rate=5))
plot2
ggsave("../img/score_diff_gamma_distribution.png")
football_dictionary <- list(
n = nrow(games),
t = nrow(dictionary_names),
win_team = as.integer(games$winning_team),
lose_team = as.integer(games$losing_team),
score_diff = as.integer(games$score_diff)
)
posterior_football <- sampling(
object = football_stan_model, #Stan model
data = football_dictionary, # data for the model
chains = 1, # number of sampling runs
iter = 20000, # number of iterations
warmup = 2000, # burning iteration for stability
thin = 20, # number of steps to skip between each draw
seed = 553 # for reproducibility
)
posterior_football <- as.data.frame(posterior_football)
# dropping the last column
posterior_football <- posterior_football[, 1:20]
# We create a new column indicating the replicate by row (900 in total).
posterior_football$sample <- 1:nrow(posterior_football)
## Melting the data frame leaving one column for the replicate number (sample),
## another one indicating the team (as skill[1], ... skill[20]), and
## the continuous posterior skill values from our Bayesian sampling.
posterior_football <- posterior_football |>
pivot_longer(!sample, names_to = "team", values_to = "skill")
## Getting real team names stored in dictionary_names insead of the coded numbers
posterior_football$team <- as.factor(posterior_football$team)
dictionary_names <- dictionary_names %>%
mutate(code = paste("skill[", as.character(code), "]", sep = ""))
recoding <- dictionary_names$team
names(recoding) <- dictionary_names$code
levels(posterior_football$team) <- recode(
levels(posterior_football$team),
!!!recoding)
posterior_football_CIs <- posterior_football |>
group_by(team) |> summarise(lower_bound = quantile(skill, 0.25),
median = quantile(skill, 0.5),
upper_bound = quantile(skill, 0.75))
head(posterior_football_CIs)
posterior_football_CIs <- posterior_football_CIs[order(-posterior_football_CIs$median), ]
posterior_football_CIs_plot <- posterior_football_CIs |> ggplot(aes(x = median, y = reorder(team, median), color =team)) + geom_errorbarh(aes(xmin = lower_bound, xmax = upper_bound)) + geom_point() + labs(x = "Median", y= "Team Code", title = "50% Credible Intervals of Skill by Team") + theme_classic()
posterior_football_CIs_plot
ggsave("../img/50p_credible_interval_skill.png")
plot1 <- hist(games$score_diff, breaks = seq(min(games$score_diff), max(games$score_diff), 0.2))
plot1
ggsave("../img/score_diff_histogram.png")
plot2 <- hist(rgamma(n=1000, shape=1, rate=5))
plot2
ggsave("../img/score_diff_gamma_distribution.png")
plot1 <- hist(games$score_diff, breaks = seq(min(games$score_diff), max(games$score_diff), 0.2))
plot1
ggsave("../img/score_diff_histogram.png")
plot1 <- hist(games$score_diff, breaks = seq(min(games$score_diff), max(games$score_diff), 0.2))
plot1[1]
ggsave("../img/score_diff_histogram.png")
plot1 <- hist(games$score_diff, breaks = seq(min(games$score_diff), max(games$score_diff), 0.2))
plot1[0]
ggsave("../img/score_diff_histogram.png")
plot1 <- hist(games$score_diff, breaks = seq(min(games$score_diff), max(games$score_diff), 0.2))
plot1
plot1 <- hist(games$score_diff, breaks = seq(min(games$score_diff), max(games$score_diff), 0.2))
plot1
ggsave("../img/score_diff_histogram.png")
plot1 <- hist(games$score_diff, breaks = seq(min(games$score_diff), max(games$score_diff), 0.2))
plot1
png("../img/score_diff_histogram.png")
png(file = "../img/score_diff_histogram.png")
hist(games$score_diff, breaks = seq(min(games$score_diff), max(games$score_diff), 0.2))
dev.off()
png(file = "../img/score_diff_histogram.png", width=600, height=350)
hist(games$score_diff, breaks = seq(min(games$score_diff), max(games$score_diff), 0.2))
dev.off()
png(file = "../img/score_diff_histogram.png", width=600, height=350)
hist(games$score_diff, breaks = seq(min(games$score_diff), max(games$score_diff), 0.2))
dev.off()
png(file = "../img/score_diff_gamma_distribution.png", width=600, height=350)
hist(rgamma(n = 1000, shape = 1, rate = 5))
dev.off()
View(posterior_football_CIs)
View(posterior_football)
View(football_dictionary)
View(football_stan_model)
View(dictionary_names)
View(posterior_football)
View(xgfootball_stan_model)
xgfootball_dictionary <- list(
n = nrow(games),
t = nrow(dictionary_names),
win_team = as.integer(games$winning_team),
lose_team = as.integer(games$losing_team),
xg_diff = as.numeric(games$xg_diff)
)
posterior_xgfootball <- sampling(
object = xgfootball_stan_model, #Stan model
data = xgfootball_dictionary, # data for the model
chains = 1, # number of sampling runs
iter = 20000, # number of iterations
warmup = 2000, # burning iteration for stability
thin = 20, # number of steps to skip between each draw
seed = 553 # for reproducibility
)
posterior_xgfootball <- as.data.frame(posterior_xgfootball)
View(posterior_xgfootball)
# dropping the last column
posterior_xgfootball <- posterior_xgfootball[, 1:20]
# We create a new column indicating the replicate by row (900 in total).
posterior_xgfootball$sample <- 1:nrow(posterior_xgfootball)
## Melting the data frame leaving one column for the replicate number (sample),
## another one indicating the team (as skill[1], ... skill[20]), and
## the continuous posterior skill values from our Bayesian sampling.
posterior_xgfootball <- posterior_xgfootball |>
pivot_longer(!sample, names_to = "team", values_to = "skill")
## Getting real team names stored in dictionary_names insead of the coded numbers
posterior_xgfootball$team <- as.factor(posterior_xgfootball$team)
dictionary_names <- dictionary_names %>%
mutate(code = paste("skill[", as.character(code), "]", sep = ""))
# recoding to football team names
levels(posterior_xgfootball$team) <- recode(
levels(posterior_xgfootball$team),
!!!recoding)
View(posterior_xgfootball)
posterior_xgfootball_CIs <- posterior_xgfootball |>
group_by(team) |> summarise(lower_bound = quantile(skill, 0.25),
median = quantile(skill, 0.5),
upper_bound = quantile(skill, 0.75))
head(posterior_xgfootball_CIs)
posterior_xgfootball_CIs <- posterior_xgfootball_CIs[order(-posterior_football_CIs$median), ]
posterior_xgfootball_CIs_plot <- posterior_xgfootball_CIs |> ggplot(aes(x = median, y = reorder(team, median), color =team)) + geom_errorbarh(aes(xmin = lower_bound, xmax = upper_bound)) + geom_point() + labs(x = "Median", y= "Team Code", title = "50% Credible Intervals of Skill by Team - Using xG") + theme_classic()
posterior_xgfootball_CIs_plot
ggsave("../img/50p_credible_interval_skill_xg.png")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rstan)
library(rstantools)
library(cowplot)
library(lubridate)
library(dplyr)
rstan_options(auto_write = TRUE)  # To save some compiling
games_raw <- read_csv("../data/epl_2022_2023_matches.csv")
head(games_raw)
games <- games_raw |>
mutate(date = as.numeric(format(as.Date(games_raw$Date, format="%d-%m-%Y"), "%Y")),
away_team = as.factor(Away),
home_team = as.factor(Home),
away_xg = as.numeric(away_xG),
home_xg = as.numeric(home_xG)
) |>
select(
date, home_team, home_final_score, home_xg, away_team, away_final_score, away_xg
)
head(games)
dictionary_names <- tibble(
team = levels(games$away_team),
code = 1:20
)
# Ensuring the levels are per the alphabetical order
levels(games$away_team) <- 1:20
levels(games$home_team) <- 1:20
games <- games %>%
mutate(
winning_team = case_when(
away_final_score > home_final_score ~ away_team,
away_final_score < home_final_score ~ home_team
),
winning_score = case_when(
away_final_score > home_final_score ~ away_final_score,
away_final_score < home_final_score ~ home_final_score
),
winning_xg = case_when(
away_xg > home_xg ~ away_xg,
away_xg < home_xg ~ home_xg
),
losing_team = case_when(
away_final_score > home_final_score ~ home_team,
away_final_score < home_final_score ~ away_team
),
losing_score = case_when(
away_final_score > home_final_score ~ home_final_score,
away_final_score < home_final_score ~ away_final_score
),
losing_xg = case_when(
away_xg > home_xg ~ home_xg,
away_xg < home_xg ~ away_xg
),
score_diff = winning_score - losing_score,
xg_diff = winning_xg - losing_xg
) %>%
select(
winning_team, winning_score, winning_xg,
losing_team, losing_score, losing_xg, score_diff, xg_diff
)
# Removing the rows where there is an NA, draws will be marked with NA
games <- drop_na(games)
football_dictionary <- list(
n = nrow(games),
t = nrow(dictionary_names),
win_team = as.integer(games$winning_team),
lose_team = as.integer(games$losing_team),
score_diff = as.integer(games$score_diff)
)
posterior_football <- sampling(
object = football_stan_model, #Stan model
data = football_dictionary, # data for the model
chains = 1, # number of sampling runs
iter = 20000, # number of iterations
warmup = 2000, # burning iteration for stability
thin = 20, # number of steps to skip between each draw
seed = 553 # for reproducibility
)
posterior_football <- as.data.frame(posterior_football)
# dropping the last column
posterior_football <- posterior_football[, 1:20]
# We create a new column indicating the replicate by row (900 in total).
posterior_football$sample <- 1:nrow(posterior_football)
## Melting the data frame leaving one column for the replicate number (sample),
## another one indicating the team (as skill[1], ... skill[20]), and
## the continuous posterior skill values from our Bayesian sampling.
posterior_football <- posterior_football |>
pivot_longer(!sample, names_to = "team", values_to = "skill")
## Getting real team names stored in dictionary_names insead of the coded numbers
posterior_football$team <- as.factor(posterior_football$team)
dictionary_names <- dictionary_names %>%
mutate(code = paste("skill[", as.character(code), "]", sep = ""))
recoding <- dictionary_names$team
names(recoding) <- dictionary_names$code
levels(posterior_football$team) <- recode(
levels(posterior_football$team),
!!!recoding)
posterior_football_CIs <- posterior_football |>
group_by(team) |> summarise(lower_bound = quantile(skill, 0.25),
median = quantile(skill, 0.5),
upper_bound = quantile(skill, 0.75))
head(posterior_football_CIs)
posterior_football_CIs <- posterior_football_CIs[order(-posterior_football_CIs$median), ]
posterior_football_CIs_plot <- posterior_football_CIs |> ggplot(aes(x = median, y = reorder(team, median), color =team)) + geom_errorbarh(aes(xmin = lower_bound, xmax = upper_bound)) + geom_point() + labs(x = "Median", y= "Team Code", title = "50% Credible Intervals of Skill by Team - Using score") + theme_classic()
posterior_football_CIs_plot
ggsave("../img/50p_credible_interval_skill_score.png")
xgfootball_dictionary <- list(
n = nrow(games),
t = nrow(dictionary_names),
win_team = as.integer(games$winning_team),
lose_team = as.integer(games$losing_team),
xg_diff = as.numeric(games$xg_diff)
)
posterior_xgfootball <- sampling(
object = xgfootball_stan_model, #Stan model
data = xgfootball_dictionary, # data for the model
chains = 1, # number of sampling runs
iter = 20000, # number of iterations
warmup = 2000, # burning iteration for stability
thin = 20, # number of steps to skip between each draw
seed = 553 # for reproducibility
)
posterior_xgfootball <- as.data.frame(posterior_xgfootball)
# dropping the last column
posterior_xgfootball <- posterior_xgfootball[, 1:20]
# We create a new column indicating the replicate by row (900 in total).
posterior_xgfootball$sample <- 1:nrow(posterior_xgfootball)
## Melting the data frame leaving one column for the replicate number (sample),
## another one indicating the team (as skill[1], ... skill[20]), and
## the continuous posterior skill values from our Bayesian sampling.
posterior_xgfootball <- posterior_xgfootball |>
pivot_longer(!sample, names_to = "team", values_to = "skill")
## Getting real team names stored in dictionary_names insead of the coded numbers
posterior_xgfootball$team <- as.factor(posterior_xgfootball$team)
dictionary_names <- dictionary_names %>%
mutate(code = paste("skill[", as.character(code), "]", sep = ""))
# recoding to football team names
levels(posterior_xgfootball$team) <- recode(
levels(posterior_xgfootball$team),
!!!recoding)
posterior_xgfootball_CIs <- posterior_xgfootball |>
group_by(team) |> summarise(lower_bound = quantile(skill, 0.25),
median = quantile(skill, 0.5),
upper_bound = quantile(skill, 0.75))
head(posterior_xgfootball_CIs)
posterior_xgfootball_CIs <- posterior_xgfootball_CIs[order(-posterior_football_CIs$median), ]
posterior_xgfootball_CIs_plot <- posterior_xgfootball_CIs |> ggplot(aes(x = median, y = reorder(team, median), color =team)) + geom_errorbarh(aes(xmin = lower_bound, xmax = upper_bound)) + geom_point() + labs(x = "Median", y= "Team Code", title = "50% Credible Intervals of Skill by Team - Using xG") + theme_classic()
posterior_xgfootball_CIs_plot
ggsave("../img/50p_credible_interval_skill_xg.png")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rstan)
library(rstantools)
library(cowplot)
library(lubridate)
library(dplyr)
library(rmarkdown)
rstan_options(auto_write = TRUE)  # To save some compiling
output_dir <- "../doc"
render("code.Rmd", output_dir = output_dir)
